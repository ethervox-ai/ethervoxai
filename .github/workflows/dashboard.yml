name: Dashboard CI/CD

on:
  push:
    branches: [ main, develop, 'feature/**', 'hotfix/**' ]
    paths: [ 'dashboard/**', '.github/workflows/dashboard.yml' ]
  pull_request:
    branches: [ main, develop ]
    paths: [ 'dashboard/**', '.github/workflows/dashboard.yml' ]

defaults:
  run:
    working-directory: dashboard

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  test:
    name: Test Dashboard
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: dashboard/package-lock.json

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Type check
      run: pnpm run type-check

    - name: Lint
      run: pnpm run lint

    - name: Format check
      run: pnpm run format:check

    - name: Run unit tests
      run: pnpm run test:unit -- --coverage

    - name: Run component tests
      run: pnpm run test:component

    - name: Upload test coverage
      uses: codecov/codecov-action@v4
      with:
        files: dashboard/coverage/lcov.info
        flags: dashboard
        name: dashboard-coverage
        fail_ci_if_error: false

  build:
    name: Build Dashboard
    runs-on: ubuntu-latest
    needs: test

    strategy:
      matrix:
        mode: ['development', 'production']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: dashboard/package-lock.json

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Build for production
      if: matrix.mode == 'production'
      run: pnpm run build
      env:
        NODE_ENV: production

    - name: Build for development
      if: matrix.mode == 'development'
      run: pnpm run build:dev
      env:
        NODE_ENV: development

    - name: Analyze bundle size
      if: matrix.mode == 'production'
      run: |
        pnpm run build:analyze
        echo "=== Bundle Analysis ===" >> bundle-analysis.txt
        echo "Build mode: ${{ matrix.mode }}" >> bundle-analysis.txt
        echo "Generated: $(date)" >> bundle-analysis.txt
        echo "" >> bundle-analysis.txt
        
        # Get file sizes
        if [ -d "dist" ]; then
          echo "File sizes:" >> bundle-analysis.txt
          find dist -name "*.js" -o -name "*.css" | xargs ls -lh >> bundle-analysis.txt
          echo "" >> bundle-analysis.txt
          echo "Total size:" >> bundle-analysis.txt
          du -sh dist >> bundle-analysis.txt
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dashboard-${{ matrix.mode }}-${{ github.sha }}
        path: |
          dashboard/dist/
          dashboard/bundle-analysis.txt
        retention-days: 30

  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: dashboard/package-lock.json

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Install Playwright browsers
      run: pnpm exec playwright install --with-deps

    - name: Build application
      run: pnpm run build

    - name: Run E2E tests
      run: pnpm run test:e2e

    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results-${{ github.sha }}
        path: |
          dashboard/test-results/
          dashboard/playwright-report/
        retention-days: 15

  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: dashboard/package-lock.json

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Build application
      run: pnpm run build

    - name: Serve application
      run: |
        pnpm run preview &
        sleep 10  # Wait for server to start
      env:
        CI: true

    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

    - name: Upload Lighthouse results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lighthouse-results-${{ github.sha }}
        path: .lighthouseci/
        retention-days: 15

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: dashboard/package-lock.json

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run security audit
      run: pnpm audit

    - name: Run dependency check
      run: |
        npx audit-ci --config .auditci.json
        
    - name: Scan for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: dashboard/
        base: ${{ github.event.repository.default_branch }}
        head: HEAD

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [test, build, e2e-test]
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: dashboard/package-lock.json

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Build for preview
      run: pnpm run build
      env:
        NODE_ENV: production

    - name: Deploy to Netlify (Preview)
      uses: nwtgck/actions-netlify@v3.0
      with:
        publish-dir: dashboard/dist
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions - PR #${{ github.event.number }}"
        enable-pull-request-comment: true
        enable-commit-comment: true
        overwrites-pull-request-comment: true
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

    - name: Comment deployment URL
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'ðŸš€ Dashboard preview deployed! Check the deployment status above for the URL.'
          })